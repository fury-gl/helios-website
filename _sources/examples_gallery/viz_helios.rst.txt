
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_gallery/viz_helios.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_viz_helios.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_viz_helios.py:


=============================================================
Force-Directed: Interdisciplinary map of the journals network
=============================================================

The goal of this app is to show an overview of the journals network structure
as a complex network. Each journal is shown as a node and their connections
indicates a citation between two of them.

.. GENERATED FROM PYTHON SOURCE LINES 13-14

First, let's import some useful functions

.. GENERATED FROM PYTHON SOURCE LINES 14-21

.. code-block:: default


    from os.path import join as pjoin
    import time
    from fury import colormap as cmap
    from fury.window import record
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Then let's download some available datasets.

.. GENERATED FROM PYTHON SOURCE LINES 23-33

.. code-block:: default


    from fury.data.fetcher import fetch_viz_wiki_nw

    from helios import NetworkDraw
    from helios.layouts.force_directed import HeliosFr

    interactive = False
    files, folder = fetch_viz_wiki_nw()
    categories_file, edges_file, positions_file = sorted(files.keys())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Dataset is already in place. If you want to fetch it again please first remove the folder /home/devmessias/.fury/examples/wiki_nw 
    More information about complex networks can be found in this papers: https://arxiv.org/abs/0711.3199




.. GENERATED FROM PYTHON SOURCE LINES 34-35

We read our datasets

.. GENERATED FROM PYTHON SOURCE LINES 35-41

.. code-block:: default


    positions = np.loadtxt(pjoin(folder, positions_file))
    positions = np.random.normal(scale=10, size=positions.shape)
    categories = np.loadtxt(pjoin(folder, categories_file), dtype=str)
    edges = np.loadtxt(pjoin(folder, edges_file), dtype=int)








.. GENERATED FROM PYTHON SOURCE LINES 42-44

We attribute a color to each category of our dataset which correspond to our
nodes colors.

.. GENERATED FROM PYTHON SOURCE LINES 44-56

.. code-block:: default


    category2index = {category: i
                      for i, category in enumerate(np.unique(categories))}


    index2category = np.unique(categories)

    categoryColors = cmap.distinguishable_colormap(nb_colors=len(index2category))

    colors = np.array([categoryColors[category2index[category]]
                       for category in categories])








.. GENERATED FROM PYTHON SOURCE LINES 57-58

We define our node size

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default


    radii = 1 + np.random.rand(len(positions))








.. GENERATED FROM PYTHON SOURCE LINES 62-65

Lets create our edges now. They will indicate a citation between two nodes.
OF course, the colors of each edges will be an interpolation between the two
node that it connects.

.. GENERATED FROM PYTHON SOURCE LINES 65-75

.. code-block:: default


    #edgesPositions = []
    edgesColors = []
    for source, target in edges:
        #edgesPositions.append(np.array([positions[source], positions[target]]))
        edgesColors.append(np.array([colors[source], colors[target]]))

    #edgesPositions = np.array(edgesPositions)
    edgesColors = np.average(np.array(edgesColors), axis=1)








.. GENERATED FROM PYTHON SOURCE LINES 76-79

Our data preparation is ready, it is time to visualize them all. We start to
build 2 actors that we represent our data : sphere_actor for the nodes and
lines_actor for the edges.

.. GENERATED FROM PYTHON SOURCE LINES 79-95

.. code-block:: default



    network_draw = NetworkDraw(
            positions=positions,
            colors=colors,
            scales=4,
            node_edge_width=0,
            edge_line_color=edgesColors,
            marker='3d',
            edges=edges,
            window_size=(600, 600)
    )
    layout = HeliosFr(
        edges, network_draw, max_workers=2, update_interval_workers=0)

    layout.start()







.. GENERATED FROM PYTHON SOURCE LINES 96-98

The final step ! Visualize and save the result of our creation! Please,
switch interactive variable to True if you want to visualize it.

.. GENERATED FROM PYTHON SOURCE LINES 98-109

.. code-block:: default


    if not interactive:
        time.sleep(10)
        layout.stop()

    if interactive:
        network_draw.showm.initialize()
        network_draw.showm.start()

        record(
            network_draw.showm.scene, out_path='viz_helios.png', size=(600, 600))








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.302 seconds)


.. _sphx_glr_download_examples_gallery_viz_helios.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: viz_helios.py <viz_helios.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: viz_helios.ipynb <viz_helios.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
